"use strict";(self.webpackChunkcp_solutions=self.webpackChunkcp_solutions||[]).push([[8464],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},u=Object.keys(e);for(n=0;n<u.length;n++)r=u[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(n=0;n<u.length;n++)r=u[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,u=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||u;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var u=r.length,a=new Array(u);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<u;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9310:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>y,frontMatter:()=>u,metadata:()=>i,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const u={id:"queue",title:"Queue",description:"",tags:["queue"]},a=void 0,i={unversionedId:"data-structures/queue",id:"data-structures/queue",title:"Queue",description:"",source:"@site/docs/data-structures/05-queue.mdx",sourceDirName:"data-structures",slug:"/data-structures/queue",permalink:"/cp-solutions/docs/data-structures/queue",draft:!1,editUrl:"https://github.com/MSVhora/cp-solutions/blob/master/docs/data-structures/05-queue.mdx",tags:[{label:"queue",permalink:"/cp-solutions/docs/tags/queue"}],version:"current",sidebarPosition:5,frontMatter:{id:"queue",title:"Queue",description:"",tags:["queue"]},sidebar:"mainSidebar",previous:{title:"Stack",permalink:"/cp-solutions/docs/data-structures/stack"},next:{title:"Tree",permalink:"/cp-solutions/docs/data-structures/tree"}},s={},l=[{value:"What is a Queue?",id:"what-is-a-queue",level:2},{value:"FIFO( First In First Out )",id:"fifo-first-in-first-out-",level:3},{value:"Common methods",id:"common-methods",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},p=c("Tabs"),d=c("TabItem"),m=c("SolutionAuthor"),f={toc:l},h="wrapper";function y(e){let{components:t,...u}=e;return(0,o.kt)(h,(0,n.Z)({},f,u,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"what-is-a-queue"},"What is a Queue?"),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"Queue")," is defined as a linear data structure that is open at both ends and the operations are performed in First In First Out (FIFO) order."),(0,o.kt)("h3",{id:"fifo-first-in-first-out-"},"FIFO( First In First Out )"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A Queue is like a line waiting to purchase tickets, where the first person in line is the first person served. (i.e. First come first serve)."),(0,o.kt)("li",{parentName:"ul"},"Position of the entry in a queue ready to be served, that is, the first entry that will be removed from the queue, is called the front of the queue(sometimes, head of the queue), similarly, the position of the last entry in the queue, that is, the one most recently added, is called the rear (or the tail) of the queue. See the below figure.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Queue",src:r(4062).Z,width:"1001",height:"501"})),(0,o.kt)("h2",{id:"common-methods"},"Common methods"),(0,o.kt)(p,{mdxType:"Tabs"},(0,o.kt)(d,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)(m,{name:"@msvhora",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kt"},"import java.util.ArrayDeque\n\nfun main(args: Array<String>)\n{\n    // Initialize Queue\n    val queue =  ArrayDeque<Int>();\n\n    // Enqueue operation\n    queue.addLast(1)\n    queue.addLast(2)\n    queue.addLast(3)\n    queue.addLast(4)\n\n    // Dequeue operation\n    val removedElement = queue.removeFirst() // throws exception if queue empty\n    val removedElement = queue.removeFirstOrNull() // Wont throw exception if empty\n\n    // Peek operation\n    val frontElement = queue.first()\n    val frontElement = queue.firstOrNull()\n\n    // Size\n    queue.size\n\n    // Check empty\n    queue.isEmpty()\n}\n\n")))))}y.isMDXComponent=!0},4062:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/1-926374c6a0f29454a7a647277dba801a.png"}}]);