"use strict";(self.webpackChunkcp_solutions=self.webpackChunkcp_solutions||[]).push([[8776],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>k});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var c=n.createContext({}),l=function(t){var e=n.useContext(c),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},p=function(t){var e=l(t.components);return n.createElement(c.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),u=l(a),m=r,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return a?n.createElement(k,s(s({ref:e},p),{},{components:a})):n.createElement(k,s({ref:e},p))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[u]="string"==typeof t?t:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9697:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const o={id:"stack",title:"Stack",description:"",tags:["stack"]},s=void 0,i={unversionedId:"data-structures/stack",id:"data-structures/stack",title:"Stack",description:"",source:"@site/docs/data-structures/04-stack.mdx",sourceDirName:"data-structures",slug:"/data-structures/stack",permalink:"/cp-solutions/docs/data-structures/stack",draft:!1,editUrl:"https://github.com/MSVhora/cp-solutions/blob/master/docs/data-structures/04-stack.mdx",tags:[{label:"stack",permalink:"/cp-solutions/docs/tags/stack"}],version:"current",sidebarPosition:4,frontMatter:{id:"stack",title:"Stack",description:"",tags:["stack"]},sidebar:"mainSidebar",previous:{title:"Linked List",permalink:"/cp-solutions/docs/data-structures/linked-list"},next:{title:"Queue",permalink:"/cp-solutions/docs/data-structures/queue"}},c={},l=[{value:"What is a Stack?",id:"what-is-a-stack",level:2},{value:"LIFO( Last In First Out )",id:"lifo-last-in-first-out-",level:3},{value:"Common methods",id:"common-methods",level:2}],p=t=>function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)},u=p("Tabs"),d=p("TabItem"),m=p("SolutionAuthor"),k={toc:l},f="wrapper";function h(t){let{components:e,...o}=t;return(0,r.kt)(f,(0,n.Z)({},k,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-is-a-stack"},"What is a Stack?"),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"stack")," is a linear data structure in which the insertion of a new element and removal of an existing element takes place at the same end represented as the top of the stack."),(0,r.kt)("h3",{id:"lifo-last-in-first-out-"},"LIFO( Last In First Out )"),(0,r.kt)("p",null,"This strategy states that the element that is inserted last will come out first. You can take a pile of plates kept on top of each other as a real-life example. The plate which we put last is on the top and since we remove the plate that is at the top, we can say that the plate that was put last comes out first."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Stack",src:a(8271).Z,width:"660",height:"566"})),(0,r.kt)("h2",{id:"common-methods"},"Common methods"),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(d,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)(m,{name:"@msvhora",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},"import java.util.ArrayDeque\n\nfun main(args: Array<String>)\n{\n    // Initialize Stack\n    val stack =  ArrayDeque<Int>();\n\n    // Push operation\n    stack.addFirst(1)\n    stack.addFirst(2)\n    stack.addFirst(3)\n    stack.addFirst(4)\n\n    // Pop operation\n    val poppedElement = stack.removeFirst() // throws exception if stack empty\n    val poppedElement = stack.removeFirstOrNull() // Wont throw exception if empty\n\n    // Peek operation\n    val topElement = stack.first()\n    val topElement = stack.firstOrNull()\n\n    // Size\n    stack.size\n\n    // Check empty\n    stack.isEmpty()\n}\n\n")))))}h.isMDXComponent=!0},8271:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/1-f9e4bc51e60a8642abc582db948c1cdd.png"}}]);