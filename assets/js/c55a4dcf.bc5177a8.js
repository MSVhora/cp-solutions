"use strict";(self.webpackChunkcp_solutions=self.webpackChunkcp_solutions||[]).push([[9768],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),d=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return i.createElement(o.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,k=c["".concat(o,".").concat(m)]||c[m]||p[m]||a;return t?i.createElement(k,l(l({ref:n},u),{},{components:t})):i.createElement(k,l({ref:n},u))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var d=2;d<a;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1168:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=t(7462),r=(t(7294),t(3905));const a={id:"linked-list",title:"Linked List",description:"",tags:["linked-list"]},l=void 0,s={unversionedId:"data-structures/linked-list",id:"data-structures/linked-list",title:"Linked List",description:"",source:"@site/docs/data-structures/03-linked-list.mdx",sourceDirName:"data-structures",slug:"/data-structures/linked-list",permalink:"/cp-solutions/docs/data-structures/linked-list",draft:!1,editUrl:"https://github.com/MSVhora/cp-solutions/blob/master/docs/data-structures/03-linked-list.mdx",tags:[{label:"linked-list",permalink:"/cp-solutions/docs/tags/linked-list"}],version:"current",sidebarPosition:3,frontMatter:{id:"linked-list",title:"Linked List",description:"",tags:["linked-list"]},sidebar:"mainSidebar",previous:{title:"String",permalink:"/cp-solutions/docs/data-structures/string"},next:{title:"Stack",permalink:"/cp-solutions/docs/data-structures/stack"}},o={},d=[{value:"What is a Linked List?",id:"what-is-a-linked-list",level:2},{value:"Types of Linked List",id:"types-of-linked-list",level:2},{value:"Single Linked List",id:"single-linked-list",level:3},{value:"Double Linked List",id:"double-linked-list",level:3},{value:"Circular Linked List",id:"circular-linked-list",level:3},{value:"Custom Implementation",id:"custom-implementation",level:2},{value:"Library LinkedList and its common methods",id:"library-linkedlist-and-its-common-methods",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},c=u("Tabs"),p=u("TabItem"),m=u("SolutionAuthor"),k={toc:d},v="wrapper";function f(e){let{components:n,...a}=e;return(0,r.kt)(v,(0,i.Z)({},k,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-is-a-linked-list"},"What is a Linked List?"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Linked List")," is a linear data structure, in which elements are not stored at a contiguous location, rather they are linked using ",(0,r.kt)("strong",{parentName:"p"},"pointers"),". Linked List forms a series of connected nodes, where each node stores the data and the address of the next node."),(0,r.kt)("h2",{id:"types-of-linked-list"},"Types of Linked List"),(0,r.kt)("h3",{id:"single-linked-list"},"Single Linked List"),(0,r.kt)("p",null,"In a singly linked list, each node contains a reference to the next node in the sequence. Traversing a singly linked list is done in a forward direction."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Single Linked List",src:t(6788).Z,width:"1013",height:"252"})),(0,r.kt)("h3",{id:"double-linked-list"},"Double Linked List"),(0,r.kt)("p",null,"In a doubly linked list, each node contains references to both the next and previous nodes. This allows for traversal in both forward and backward directions, but it requires additional memory for the backward reference."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Double Linked List",src:t(5421).Z,width:"1096",height:"183"})),(0,r.kt)("h3",{id:"circular-linked-list"},"Circular Linked List"),(0,r.kt)("p",null," In a circular linked list, the last node points back to the head node, creating a circular structure. It can be either singly or doubly linked."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Double Linked List",src:t(6238).Z,width:"912",height:"222"})),(0,r.kt)("h2",{id:"custom-implementation"},"Custom Implementation"),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(p,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)(m,{name:"@msvhora",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},'class LinkedList<T> {\n    data class Node<R>(\n        val value: R,\n        var next: Node<R>? = null\n    ) {\n        override fun toString(): String {\n            return if(next != null) {\n                "$value -> ${next.toString()}"\n            } else {\n                "$value"\n            }\n        }\n    }\n\n    private var head: Node<T>? = null\n    private var tail: Node<T>? = null\n    private var size = 0\n\n    fun isEmpty() = size == 0\n\n    override fun toString() = \n        if(isEmpty())\n            "Empty List"\n        else \n            head.toString()\n\n    fun addFirst(value: T) {\n        head = Node(\n            value = value,\n            next = head\n        )\n\n        if(tail == null) {\n            tail = head\n        }\n        size++\n    }\n\n    fun addLast(value: T) {\n        if(tail == null) {\n            tail = Node(value)\n            head = tail\n        } else {\n            tail?.next = Node(value)\n            tail = tail?.next\n        }\n\n        size++\n    }\n\n    fun first() = head?.value\n\n    fun last() = tail?.value\n\n    fun removeFirst(): T? {\n        if(head == null) {\n            return null\n        }\n\n        size--\n        val value = head?.value\n        head = head?.next\n\n        if(isEmpty()) {\n            tail = null\n        }\n\n        return value\n    }\n\n    fun removeLast(): T? {\n        if(head == null) {\n            return null\n        }\n\n        size--\n        var prev: Node<T>? = null\n        var cur = head\n\n        while(cur?.next != null) {\n            prev = cur\n            cur = cur.next\n        }\n\n        if(prev == null) {\n            head = null\n            tail = null\n        } else {\n            prev.next = null\n            tail = prev\n        }\n\n        return cur?.value\n    }\n}\n\n')))),(0,r.kt)("h2",{id:"library-linkedlist-and-its-common-methods"},"Library LinkedList and its common methods"),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(p,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)(m,{name:"@msvhora",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},'import java.util.LinkedList\n\nfun main(args: Array<String>)\n{\n    // Initialize LinkedList\n    val planets =  LinkedList<String>();\n\n    // Append elements to linked list\n    planets.addAll(\n        listOf(\n            "Venus", \n            "Earth", \n            "Mars"\n        )\n    )\n\n    // Insert at beginning\n    planets.addFirst("Mercury")\n    \n    // Insert at end\n    planets.addLast("Jupiter") or planets.add("Jupiter")\n    \n    // Remove from beginning\n    planets.removeFirst()\n\n    // Remove from end\n    planets.removeLast()\n\n    // Check head\n    planets.getFirst() // Empty list throws NoSuchElementException\n\n    // Check tail\n    planets.getLast()\n}\n\n')))))}f.isMDXComponent=!0},6788:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/1-cc698f0da937637e45aca1a003dc76da.png"},5421:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/2-3b97822e2ae9f8c9611ad3ed80db1202.png"},6238:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/3-e1cc1d28d4d33b25a30f8032675b515f.png"}}]);